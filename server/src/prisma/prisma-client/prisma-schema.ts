// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateFile {
  count: Int!
}

type AggregateGameContent {
  count: Int!
}

type AggregateGenre {
  count: Int!
}

type AggregateNation {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type File {
  id: ID!
  filename: String!
  mimetype: String!
  encoding: String!
  originalFilename: String!
  path: String!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  filename: String!
  mimetype: String!
  encoding: String!
  originalFilename: String!
  path: String!
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  filename_ASC
  filename_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
  originalFilename_ASC
  originalFilename_DESC
  path_ASC
  path_DESC
}

type FilePreviousValues {
  id: ID!
  filename: String!
  mimetype: String!
  encoding: String!
  originalFilename: String!
  path: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateInput {
  filename: String
  mimetype: String
  encoding: String
  originalFilename: String
  path: String
}

input FileUpdateManyMutationInput {
  filename: String
  mimetype: String
  encoding: String
  originalFilename: String
  path: String
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  mimetype: String
  mimetype_not: String
  mimetype_in: [String!]
  mimetype_not_in: [String!]
  mimetype_lt: String
  mimetype_lte: String
  mimetype_gt: String
  mimetype_gte: String
  mimetype_contains: String
  mimetype_not_contains: String
  mimetype_starts_with: String
  mimetype_not_starts_with: String
  mimetype_ends_with: String
  mimetype_not_ends_with: String
  encoding: String
  encoding_not: String
  encoding_in: [String!]
  encoding_not_in: [String!]
  encoding_lt: String
  encoding_lte: String
  encoding_gt: String
  encoding_gte: String
  encoding_contains: String
  encoding_not_contains: String
  encoding_starts_with: String
  encoding_not_starts_with: String
  encoding_ends_with: String
  encoding_not_ends_with: String
  originalFilename: String
  originalFilename_not: String
  originalFilename_in: [String!]
  originalFilename_not_in: [String!]
  originalFilename_lt: String
  originalFilename_lte: String
  originalFilename_gt: String
  originalFilename_gte: String
  originalFilename_contains: String
  originalFilename_not_contains: String
  originalFilename_starts_with: String
  originalFilename_not_starts_with: String
  originalFilename_ends_with: String
  originalFilename_not_ends_with: String
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
}

type GameContent {
  id: ID!
  genres(where: GenreWhereInput, orderBy: GenreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Genre!]
  title: String!
  content: String!
  productionYear: Int!
  ProductionNation: Nation
  mainImage: String
  subImage: String
}

type GameContentConnection {
  pageInfo: PageInfo!
  edges: [GameContentEdge]!
  aggregate: AggregateGameContent!
}

input GameContentCreateInput {
  id: ID
  genres: GenreCreateManyWithoutGameContentsInput
  title: String!
  content: String!
  productionYear: Int!
  ProductionNation: NationCreateOneWithoutGameContentInput
  mainImage: String
  subImage: String
}

input GameContentCreateManyWithoutGenresInput {
  create: [GameContentCreateWithoutGenresInput!]
  connect: [GameContentWhereUniqueInput!]
}

input GameContentCreateManyWithoutProductionNationInput {
  create: [GameContentCreateWithoutProductionNationInput!]
  connect: [GameContentWhereUniqueInput!]
}

input GameContentCreateWithoutGenresInput {
  id: ID
  title: String!
  content: String!
  productionYear: Int!
  ProductionNation: NationCreateOneWithoutGameContentInput
  mainImage: String
  subImage: String
}

input GameContentCreateWithoutProductionNationInput {
  id: ID
  genres: GenreCreateManyWithoutGameContentsInput
  title: String!
  content: String!
  productionYear: Int!
  mainImage: String
  subImage: String
}

type GameContentEdge {
  node: GameContent!
  cursor: String!
}

enum GameContentOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  productionYear_ASC
  productionYear_DESC
  mainImage_ASC
  mainImage_DESC
  subImage_ASC
  subImage_DESC
}

type GameContentPreviousValues {
  id: ID!
  title: String!
  content: String!
  productionYear: Int!
  mainImage: String
  subImage: String
}

input GameContentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  productionYear: Int
  productionYear_not: Int
  productionYear_in: [Int!]
  productionYear_not_in: [Int!]
  productionYear_lt: Int
  productionYear_lte: Int
  productionYear_gt: Int
  productionYear_gte: Int
  mainImage: String
  mainImage_not: String
  mainImage_in: [String!]
  mainImage_not_in: [String!]
  mainImage_lt: String
  mainImage_lte: String
  mainImage_gt: String
  mainImage_gte: String
  mainImage_contains: String
  mainImage_not_contains: String
  mainImage_starts_with: String
  mainImage_not_starts_with: String
  mainImage_ends_with: String
  mainImage_not_ends_with: String
  subImage: String
  subImage_not: String
  subImage_in: [String!]
  subImage_not_in: [String!]
  subImage_lt: String
  subImage_lte: String
  subImage_gt: String
  subImage_gte: String
  subImage_contains: String
  subImage_not_contains: String
  subImage_starts_with: String
  subImage_not_starts_with: String
  subImage_ends_with: String
  subImage_not_ends_with: String
  AND: [GameContentScalarWhereInput!]
  OR: [GameContentScalarWhereInput!]
  NOT: [GameContentScalarWhereInput!]
}

type GameContentSubscriptionPayload {
  mutation: MutationType!
  node: GameContent
  updatedFields: [String!]
  previousValues: GameContentPreviousValues
}

input GameContentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GameContentWhereInput
  AND: [GameContentSubscriptionWhereInput!]
  OR: [GameContentSubscriptionWhereInput!]
  NOT: [GameContentSubscriptionWhereInput!]
}

input GameContentUpdateInput {
  genres: GenreUpdateManyWithoutGameContentsInput
  title: String
  content: String
  productionYear: Int
  ProductionNation: NationUpdateOneWithoutGameContentInput
  mainImage: String
  subImage: String
}

input GameContentUpdateManyDataInput {
  title: String
  content: String
  productionYear: Int
  mainImage: String
  subImage: String
}

input GameContentUpdateManyMutationInput {
  title: String
  content: String
  productionYear: Int
  mainImage: String
  subImage: String
}

input GameContentUpdateManyWithoutGenresInput {
  create: [GameContentCreateWithoutGenresInput!]
  delete: [GameContentWhereUniqueInput!]
  connect: [GameContentWhereUniqueInput!]
  set: [GameContentWhereUniqueInput!]
  disconnect: [GameContentWhereUniqueInput!]
  update: [GameContentUpdateWithWhereUniqueWithoutGenresInput!]
  upsert: [GameContentUpsertWithWhereUniqueWithoutGenresInput!]
  deleteMany: [GameContentScalarWhereInput!]
  updateMany: [GameContentUpdateManyWithWhereNestedInput!]
}

input GameContentUpdateManyWithoutProductionNationInput {
  create: [GameContentCreateWithoutProductionNationInput!]
  delete: [GameContentWhereUniqueInput!]
  connect: [GameContentWhereUniqueInput!]
  set: [GameContentWhereUniqueInput!]
  disconnect: [GameContentWhereUniqueInput!]
  update: [GameContentUpdateWithWhereUniqueWithoutProductionNationInput!]
  upsert: [GameContentUpsertWithWhereUniqueWithoutProductionNationInput!]
  deleteMany: [GameContentScalarWhereInput!]
  updateMany: [GameContentUpdateManyWithWhereNestedInput!]
}

input GameContentUpdateManyWithWhereNestedInput {
  where: GameContentScalarWhereInput!
  data: GameContentUpdateManyDataInput!
}

input GameContentUpdateWithoutGenresDataInput {
  title: String
  content: String
  productionYear: Int
  ProductionNation: NationUpdateOneWithoutGameContentInput
  mainImage: String
  subImage: String
}

input GameContentUpdateWithoutProductionNationDataInput {
  genres: GenreUpdateManyWithoutGameContentsInput
  title: String
  content: String
  productionYear: Int
  mainImage: String
  subImage: String
}

input GameContentUpdateWithWhereUniqueWithoutGenresInput {
  where: GameContentWhereUniqueInput!
  data: GameContentUpdateWithoutGenresDataInput!
}

input GameContentUpdateWithWhereUniqueWithoutProductionNationInput {
  where: GameContentWhereUniqueInput!
  data: GameContentUpdateWithoutProductionNationDataInput!
}

input GameContentUpsertWithWhereUniqueWithoutGenresInput {
  where: GameContentWhereUniqueInput!
  update: GameContentUpdateWithoutGenresDataInput!
  create: GameContentCreateWithoutGenresInput!
}

input GameContentUpsertWithWhereUniqueWithoutProductionNationInput {
  where: GameContentWhereUniqueInput!
  update: GameContentUpdateWithoutProductionNationDataInput!
  create: GameContentCreateWithoutProductionNationInput!
}

input GameContentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  genres_every: GenreWhereInput
  genres_some: GenreWhereInput
  genres_none: GenreWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  productionYear: Int
  productionYear_not: Int
  productionYear_in: [Int!]
  productionYear_not_in: [Int!]
  productionYear_lt: Int
  productionYear_lte: Int
  productionYear_gt: Int
  productionYear_gte: Int
  ProductionNation: NationWhereInput
  mainImage: String
  mainImage_not: String
  mainImage_in: [String!]
  mainImage_not_in: [String!]
  mainImage_lt: String
  mainImage_lte: String
  mainImage_gt: String
  mainImage_gte: String
  mainImage_contains: String
  mainImage_not_contains: String
  mainImage_starts_with: String
  mainImage_not_starts_with: String
  mainImage_ends_with: String
  mainImage_not_ends_with: String
  subImage: String
  subImage_not: String
  subImage_in: [String!]
  subImage_not_in: [String!]
  subImage_lt: String
  subImage_lte: String
  subImage_gt: String
  subImage_gte: String
  subImage_contains: String
  subImage_not_contains: String
  subImage_starts_with: String
  subImage_not_starts_with: String
  subImage_ends_with: String
  subImage_not_ends_with: String
  AND: [GameContentWhereInput!]
  OR: [GameContentWhereInput!]
  NOT: [GameContentWhereInput!]
}

input GameContentWhereUniqueInput {
  id: ID
}

type Genre {
  id: ID!
  name: String!
  gameContents(where: GameContentWhereInput, orderBy: GameContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GameContent!]
}

type GenreConnection {
  pageInfo: PageInfo!
  edges: [GenreEdge]!
  aggregate: AggregateGenre!
}

input GenreCreateInput {
  id: ID
  name: String!
  gameContents: GameContentCreateManyWithoutGenresInput
}

input GenreCreateManyWithoutGameContentsInput {
  create: [GenreCreateWithoutGameContentsInput!]
  connect: [GenreWhereUniqueInput!]
}

input GenreCreateWithoutGameContentsInput {
  id: ID
  name: String!
}

type GenreEdge {
  node: Genre!
  cursor: String!
}

enum GenreOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type GenrePreviousValues {
  id: ID!
  name: String!
}

input GenreScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [GenreScalarWhereInput!]
  OR: [GenreScalarWhereInput!]
  NOT: [GenreScalarWhereInput!]
}

type GenreSubscriptionPayload {
  mutation: MutationType!
  node: Genre
  updatedFields: [String!]
  previousValues: GenrePreviousValues
}

input GenreSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GenreWhereInput
  AND: [GenreSubscriptionWhereInput!]
  OR: [GenreSubscriptionWhereInput!]
  NOT: [GenreSubscriptionWhereInput!]
}

input GenreUpdateInput {
  name: String
  gameContents: GameContentUpdateManyWithoutGenresInput
}

input GenreUpdateManyDataInput {
  name: String
}

input GenreUpdateManyMutationInput {
  name: String
}

input GenreUpdateManyWithoutGameContentsInput {
  create: [GenreCreateWithoutGameContentsInput!]
  delete: [GenreWhereUniqueInput!]
  connect: [GenreWhereUniqueInput!]
  set: [GenreWhereUniqueInput!]
  disconnect: [GenreWhereUniqueInput!]
  update: [GenreUpdateWithWhereUniqueWithoutGameContentsInput!]
  upsert: [GenreUpsertWithWhereUniqueWithoutGameContentsInput!]
  deleteMany: [GenreScalarWhereInput!]
  updateMany: [GenreUpdateManyWithWhereNestedInput!]
}

input GenreUpdateManyWithWhereNestedInput {
  where: GenreScalarWhereInput!
  data: GenreUpdateManyDataInput!
}

input GenreUpdateWithoutGameContentsDataInput {
  name: String
}

input GenreUpdateWithWhereUniqueWithoutGameContentsInput {
  where: GenreWhereUniqueInput!
  data: GenreUpdateWithoutGameContentsDataInput!
}

input GenreUpsertWithWhereUniqueWithoutGameContentsInput {
  where: GenreWhereUniqueInput!
  update: GenreUpdateWithoutGameContentsDataInput!
  create: GenreCreateWithoutGameContentsInput!
}

input GenreWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  gameContents_every: GameContentWhereInput
  gameContents_some: GameContentWhereInput
  gameContents_none: GameContentWhereInput
  AND: [GenreWhereInput!]
  OR: [GenreWhereInput!]
  NOT: [GenreWhereInput!]
}

input GenreWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createGameContent(data: GameContentCreateInput!): GameContent!
  updateGameContent(data: GameContentUpdateInput!, where: GameContentWhereUniqueInput!): GameContent
  updateManyGameContents(data: GameContentUpdateManyMutationInput!, where: GameContentWhereInput): BatchPayload!
  upsertGameContent(where: GameContentWhereUniqueInput!, create: GameContentCreateInput!, update: GameContentUpdateInput!): GameContent!
  deleteGameContent(where: GameContentWhereUniqueInput!): GameContent
  deleteManyGameContents(where: GameContentWhereInput): BatchPayload!
  createGenre(data: GenreCreateInput!): Genre!
  updateGenre(data: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre
  updateManyGenres(data: GenreUpdateManyMutationInput!, where: GenreWhereInput): BatchPayload!
  upsertGenre(where: GenreWhereUniqueInput!, create: GenreCreateInput!, update: GenreUpdateInput!): Genre!
  deleteGenre(where: GenreWhereUniqueInput!): Genre
  deleteManyGenres(where: GenreWhereInput): BatchPayload!
  createNation(data: NationCreateInput!): Nation!
  updateNation(data: NationUpdateInput!, where: NationWhereUniqueInput!): Nation
  updateManyNations(data: NationUpdateManyMutationInput!, where: NationWhereInput): BatchPayload!
  upsertNation(where: NationWhereUniqueInput!, create: NationCreateInput!, update: NationUpdateInput!): Nation!
  deleteNation(where: NationWhereUniqueInput!): Nation
  deleteManyNations(where: NationWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type Nation {
  id: ID!
  name: String!
  gameContent(where: GameContentWhereInput, orderBy: GameContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GameContent!]
}

type NationConnection {
  pageInfo: PageInfo!
  edges: [NationEdge]!
  aggregate: AggregateNation!
}

input NationCreateInput {
  id: ID
  name: String!
  gameContent: GameContentCreateManyWithoutProductionNationInput
}

input NationCreateOneWithoutGameContentInput {
  create: NationCreateWithoutGameContentInput
  connect: NationWhereUniqueInput
}

input NationCreateWithoutGameContentInput {
  id: ID
  name: String!
}

type NationEdge {
  node: Nation!
  cursor: String!
}

enum NationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type NationPreviousValues {
  id: ID!
  name: String!
}

type NationSubscriptionPayload {
  mutation: MutationType!
  node: Nation
  updatedFields: [String!]
  previousValues: NationPreviousValues
}

input NationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NationWhereInput
  AND: [NationSubscriptionWhereInput!]
  OR: [NationSubscriptionWhereInput!]
  NOT: [NationSubscriptionWhereInput!]
}

input NationUpdateInput {
  name: String
  gameContent: GameContentUpdateManyWithoutProductionNationInput
}

input NationUpdateManyMutationInput {
  name: String
}

input NationUpdateOneWithoutGameContentInput {
  create: NationCreateWithoutGameContentInput
  update: NationUpdateWithoutGameContentDataInput
  upsert: NationUpsertWithoutGameContentInput
  delete: Boolean
  disconnect: Boolean
  connect: NationWhereUniqueInput
}

input NationUpdateWithoutGameContentDataInput {
  name: String
}

input NationUpsertWithoutGameContentInput {
  update: NationUpdateWithoutGameContentDataInput!
  create: NationCreateWithoutGameContentInput!
}

input NationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  gameContent_every: GameContentWhereInput
  gameContent_some: GameContentWhereInput
  gameContent_none: GameContentWhereInput
  AND: [NationWhereInput!]
  OR: [NationWhereInput!]
  NOT: [NationWhereInput!]
}

input NationWhereUniqueInput {
  id: ID
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  gameContent(where: GameContentWhereUniqueInput!): GameContent
  gameContents(where: GameContentWhereInput, orderBy: GameContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GameContent]!
  gameContentsConnection(where: GameContentWhereInput, orderBy: GameContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameContentConnection!
  genre(where: GenreWhereUniqueInput!): Genre
  genres(where: GenreWhereInput, orderBy: GenreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Genre]!
  genresConnection(where: GenreWhereInput, orderBy: GenreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GenreConnection!
  nation(where: NationWhereUniqueInput!): Nation
  nations(where: NationWhereInput, orderBy: NationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Nation]!
  nationsConnection(where: NationWhereInput, orderBy: NationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NationConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  gameContent(where: GameContentSubscriptionWhereInput): GameContentSubscriptionPayload
  genre(where: GenreSubscriptionWhereInput): GenreSubscriptionPayload
  nation(where: NationSubscriptionWhereInput): NationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  email: String!
  hash: String!
  salt: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  email: String!
  hash: String!
  salt: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  hash_ASC
  hash_DESC
  salt_ASC
  salt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  hash: String!
  salt: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  email: String
  hash: String
  salt: String
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  hash: String
  salt: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  hash: String
  hash_not: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_gt: String
  hash_gte: String
  hash_contains: String
  hash_not_contains: String
  hash_starts_with: String
  hash_not_starts_with: String
  hash_ends_with: String
  hash_not_ends_with: String
  salt: String
  salt_not: String
  salt_in: [String!]
  salt_not_in: [String!]
  salt_lt: String
  salt_lte: String
  salt_gt: String
  salt_gte: String
  salt_contains: String
  salt_not_contains: String
  salt_starts_with: String
  salt_not_starts_with: String
  salt_ends_with: String
  salt_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`